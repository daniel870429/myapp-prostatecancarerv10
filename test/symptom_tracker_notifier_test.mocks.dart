// Mocks generated by Mockito 5.4.6 from annotations
// in myapp/test/symptom_tracker_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:firebase_auth/firebase_auth.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:myapp/domain/entities/symptom_log.dart' as _i4;
import 'package:myapp/domain/repositories/auth_repository.dart' as _i5;
import 'package:myapp/domain/repositories/symptom_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SymptomRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSymptomRepository extends _i1.Mock implements _i2.SymptomRepository {
  @override
  _i3.Stream<List<_i4.SymptomLog>> watchAllSymptomLogs(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAllSymptomLogs,
          [userId],
        ),
        returnValue: _i3.Stream<List<_i4.SymptomLog>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<_i4.SymptomLog>>.empty(),
      ) as _i3.Stream<List<_i4.SymptomLog>>);

  @override
  _i3.Future<void> addSymptomLog(_i4.SymptomLog? log) => (super.noSuchMethod(
        Invocation.method(
          #addSymptomLog,
          [log],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateSymptomLog(_i4.SymptomLog? log) => (super.noSuchMethod(
        Invocation.method(
          #updateSymptomLog,
          [log],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteSymptomLog(
    int? id,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSymptomLog,
          [
            id,
            userId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i5.AuthRepository {
  @override
  _i3.Stream<_i6.User?> get authStateChanges => (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i3.Stream<_i6.User?>.empty(),
        returnValueForMissingStub: _i3.Stream<_i6.User?>.empty(),
      ) as _i3.Stream<_i6.User?>);

  @override
  _i3.Future<void> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
