// Mocks generated by Mockito 5.4.6 from annotations
// in myapp/test/profile_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;
import 'dart:ui' as _i9;

import 'package:mockito/mockito.dart' as _i1;
import 'package:myapp/core/services/file_sharer_service.dart' as _i8;
import 'package:myapp/core/services/pdf_report_service.dart' as _i3;
import 'package:myapp/domain/entities/symptom_log.dart' as _i6;
import 'package:myapp/presentation/features/symptom_tracker/notifiers/symptom_tracker_notifier.dart'
    as _i7;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeStreamNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeStreamNotifierProviderRef<T> {
  _FakeAutoDisposeStreamNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_1<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PdfReportService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPdfReportService extends _i1.Mock implements _i3.PdfReportService {
  MockPdfReportService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Uint8List> generateSymptomReport(List<_i6.SymptomLog>? logs) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateSymptomReport,
          [logs],
        ),
        returnValue: _i4.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i4.Future<_i5.Uint8List>);
}

/// A class which mocks [SymptomTrackerNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockSymptomTrackerNotifier extends _i1.Mock
    implements _i7.SymptomTrackerNotifier {
  MockSymptomTrackerNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeStreamNotifierProviderRef<List<_i6.SymptomLog>> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAutoDisposeStreamNotifierProviderRef_0<List<_i6.SymptomLog>>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeStreamNotifierProviderRef<List<_i6.SymptomLog>>);

  @override
  _i2.AsyncValue<List<_i6.SymptomLog>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_1<List<_i6.SymptomLog>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AsyncValue<List<_i6.SymptomLog>>);

  @override
  _i4.Future<List<_i6.SymptomLog>> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i4.Future<List<_i6.SymptomLog>>.value(<_i6.SymptomLog>[]),
      ) as _i4.Future<List<_i6.SymptomLog>>);

  @override
  set state(_i2.AsyncValue<List<_i6.SymptomLog>>? newState) =>
      super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<List<_i6.SymptomLog>> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i4.Stream<List<_i6.SymptomLog>>.empty(),
      ) as _i4.Stream<List<_i6.SymptomLog>>);

  @override
  _i4.Future<void> addSymptom(
    String? symptomName,
    int? severity,
    String? notes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSymptom,
          [
            symptomName,
            severity,
            notes,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteSymptom(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSymptom,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void listenSelf(
    void Function(
      _i2.AsyncValue<List<_i6.SymptomLog>>?,
      _i2.AsyncValue<List<_i6.SymptomLog>>,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<_i6.SymptomLog>> update(
    _i4.FutureOr<List<_i6.SymptomLog>> Function(List<_i6.SymptomLog>)? cb, {
    _i4.FutureOr<List<_i6.SymptomLog>> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue: _i4.Future<List<_i6.SymptomLog>>.value(<_i6.SymptomLog>[]),
      ) as _i4.Future<List<_i6.SymptomLog>>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<List<_i6.SymptomLog>>? previous,
    _i2.AsyncValue<List<_i6.SymptomLog>>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [FileSharerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSharerService extends _i1.Mock implements _i8.FileSharerService {
  MockFileSharerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveAndShare(
    String? fileName,
    _i5.Uint8List? data,
    String? text, {
    _i9.Rect? sharePositionOrigin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAndShare,
          [
            fileName,
            data,
            text,
          ],
          {#sharePositionOrigin: sharePositionOrigin},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
